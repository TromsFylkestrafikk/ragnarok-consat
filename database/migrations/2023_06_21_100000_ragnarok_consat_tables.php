<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class RagnarokConsatTables extends Migration
{
    public function up(): void
    {
        Schema::create('consat_planned_journeys', function (Blueprint $table) {
            $table->unsignedBigInteger('id')->comment('Journey ID generated by Consat');
            $table->date('date')->comment('Date of journey. Required join with other tables.');
            $table->char('journey_id', 128)->comment('NeTEx journey ID for this date. (Or Regtopp for really old data)');
            $table->char('line_id', 128)->comment('Line ID. References unavailable `line` table');
            $table->unsignedInteger('line')->comment('Numeric line number. Usually only used within route planning.');
            $table->unsignedInteger('trip')->comment('Trip number for this day. Usually four digits > 1000');
            $table->unsignedInteger('company')->comment('Company ID of operator on this journey');

            $table->primary(['date', 'id']);
            $table->index(['date','journey_id']);
        });

        Schema::create('consat_calls', function (Blueprint $table) {
            $table->date('date')->comment('Date for this call. Required join with other tables.');
            $table->unsignedBigInteger('id')->comment('Call ID generated by Consat');
            $table->unsignedBigInteger('planned_journey_id')->comment('References `consat_planned_journeys` in combination with `date`');
            $table->smallInteger('sequence')->nullable()->comment('Sequence of this call in current journey. Use this for sorting calls.');
            $table->unsignedBigInteger('stop_point_id')->nullable()->comment('References `consat_stops.id`');
            $table->integer('stop_duration')->nullable()->comment('Stop duration in seconds');
            $table->datetime('planned_arrival')->nullable()->comment('Timestamp from static route data');
            $table->datetime('planned_departure')->nullable()->comment('Timestamp from static route data');
            $table->datetime('actual_arrival')->nullable()->comment('Real-time timestamp for arrival at stop');
            $table->datetime('actual_departure')->nullable()->comment('Real-time timestamp for departure from ');
            $table->integer('distance_next_point')->nullable()->comment('Measured distance to next point in journey');
            $table->integer('delay')->nullable()->comment('Real-time delay at given call');
            $table->char('vehicle', 64)->nullable()->comment('Vehicle ID as registered by Consat');
            $table->boolean('valid')->nullable()->default(false)->comment('True when this event was verified. Use this for filtering calls.');

            $table->primary(['date', 'id']);
            $table->index(['date', 'planned_journey_id']);
        });

        Schema::create('consat_call_details', function (Blueprint $table) {
            $table->date('date')->comment('Date of event. Required join with other tables.');
            $table->timestamp('timestamp', 3)->comment('Timestamp of event');
            $table->unsignedBigInteger('call_id')->comment('References `consat_calls.id`');
            $table->unsignedTinyInteger('event_type')->nullable()->comment('Event type ID');
            $table->unsignedInteger('distance')->nullable()->comment('Distance from last stop');
            $table->double('latitude')->nullable()->comment('Latitude where event happened');
            $table->double('longitude')->nullable()->comment('Latitude where event happened');

            $table->primary(['call_id', 'timestamp']);
            $table->index(['date', 'call_id']);
        });

        Schema::create('consat_passenger_count', function (Blueprint $table) {
            $table->unsignedBigInteger('id')->comment('ID generated by Consat');
            $table->date('date')->comment('Date of data set. Required join with other tables.');
            $table->timestamp('timestamp')->comment('Timestamp of pax count');
            $table->unsignedBigInteger('call_id')->comment('Call ID this pax state is connected to. References `consat_calls.id`');
            $table->integer('on_board')->default(0)->comment('Pax already on board on this call');
            $table->smallInteger('in')->default(0)->comment('Pax entering vehicle on this call');
            $table->smallInteger('out')->default(0)->comment('Pax leaving vehicle on this call');
            $table->smallInteger('from_last_journey')->nullable()->comment('Pax aggregated from last journey');
            $table->boolean('valid')->nullable()->default(false)->comment('Pax count is valid. Filter on this for statistical purposes.');

            $table->primary(['date', 'id']);
            $table->index(['date', 'call_id']);
        });

        Schema::create('consat_stops', function (Blueprint $table) {
            $table->date('date')->comment('Date for when stop ID is valid');
            $table->unsignedBigInteger('id')->comment('Consat internal ID for this stop');
            $table->char('external_id', 64)->comment('NSR stop ID (or Regtopp for old sets)');
            $table->string('name', 128)->comment('Stop place name');
            $table->double('latitude')->comment('Latitude of stop place');
            $table->double('longitude')->comment('Longitude of stop place');

            $table->primary(['date', 'id']);
        });

        Schema::create('consat_destinations', function (Blueprint $table) {
            $table->date('date')->comment('Date for destination. Required join with other tables');
            $table->unsignedBigInteger('id')->comment('Consat internal ID.');
            $table->char('external_id', 64)->comment('NeTEx variant of destination ID (Or Regtopp for old sets)');
            $table->string('destination', 128)->comment('Name of destination');

            $table->primary(['date', 'id']);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('consat_calls');
        Schema::dropIfExists('consat_call_details');
        Schema::dropIfExists('consat_planned_journeys');
        Schema::dropIfExists('consat_passenger_count');
        Schema::dropIfExists('consat_stops');
        Schema::dropIfExists('consat_destinations');
    }
}
